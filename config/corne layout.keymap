/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define DEFAULT_LAYER 0
#define RAISE_LAYER 1
#define LOWER_LAYER 2
#define LAYER_3 3
#define LAYER_4 4
#define LAYER_5 5
#define LAYER_6 6

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&soft_off {
    hold-time-ms = <5000>; // Tiempo en milisegundos que se debe mantener presionada la tecla para activar el soft off
};

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <100>;
    bindings = <&kp>, <&kp>;

    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        Copiar {
            bindings = <&kp LC(C)>;
            key-positions = <3 2>;
        };

        Pegar {
            bindings = <&kp LC(V)>;
            key-positions = <14 15>;
        };

        Cortar {
            bindings = <&kp LC(X)>;
            key-positions = <2 3 4>;
        };

        pegarTex {
            bindings = <&kp LC(LS(V))>;
            key-positions = <14 15 16>;
        };

        Borrar-palabra {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <19 20 21>;
        };

        Soft-Off {
            bindings = <&soft_off>;
            key-positions = <0 29>;
        };

        Page-Up {
            bindings = <&kp PAGE_UP>;
            key-positions = <8 9>;
            require-prior-idle-ms = <40>;
        };

        Page-Down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <32 33>;
            require-prior-idle-ms = <40>;
        };

        Home- {
            bindings = <&kp HOME>;
            key-positions = <7 8 9>;
        };

        End- {
            bindings = <&kp END>;
            key-positions = <31 32 33>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
        };

        btclear {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <1 4>;
            layers = <3>;
        };

        bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <1 13>;
        };

        bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <2 14>;
            layers = <3>;
        };

        bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <3 15>;
            layers = <3>;
        };

        Com-tab {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <28 27>;
        };
    };

    behaviors {
        Ene_ene: Ene_ene {
            compatible = "zmk,behavior-tap-dance";
            label = "ENE_ENE";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp RA(N)>;
        };

        Hm: Hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    macros {
        Captura: M1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(S))>;
            label = "M1";
        };

        Clave: Clave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp UP_ARROW>,
                <&macro_wait_time 500>,
                <&kp DOWN>,
                <&macro_wait_time 40>,
                <&kp NUMBER_1 &kp N0 &kp NUMBER_7 &kp N9>,
                <&macro_wait_time 500>,
                <&kp ENTER>;

            label = "CLAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer = <0>; // Establece la capa 0 como predeterminada
        DEFAULT_LAYER {
            bindings = <
&kp ESCAPE         &kp Q        &kp W       &kp E             &kp R           &kp T               &kp Y             &kp U           &kp I             &kp O           &kp P                &kp DEL
&mt LEFT_ALT CAPS  &Hm LCTRL A  &Hm LALT S  &Hm LEFT_SHIFT D  &Hm LEFT_GUI F  &lt 6 G             &kp H             &Hm LEFT_GUI J  &Hm LEFT_SHIFT K  &Hm LEFT_ALT L  &Hm LCTRL SEMICOLON  &kp SQT
&kp LCTRL          &kp Z        &kp X       &kp C             &kp V           &kp B               &Ene_ene          &kp M           &kp COMMA         &kp DOT         &kp FSLH             &mt RIGHT_ALT BACKSPACE
                                            &kp LGUI          &mo 1           &mt LSHIFT ENTER    &mt LSHIFT SPACE  &mo 2           &mo 4
            >;
        };

        RAISE_LAYER {
            bindings = <
&kp ESC   &kp LEFT_WIN      &kp PAGE_DOWN            &kp UP_ARROW            &kp PAGE_UP        &kp DEL          &kp PLUS   &kp N7        &kp N8        &kp N9        &kp ASTRK   &trans
&kp LALT  &kp SPACE         &kp LEFT_ARROW           &kp DOWN_ARROW          &kp RIGHT          &kp BACKSPACE    &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH   &kp COLON
&trans    &kp LS(LG(LEFT))  &kp LS(LG(RIGHT_ARROW))  &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT))  &kp LG(LS(S))    &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DOT  &trans
                                                     &trans                  &trans             &trans           &trans     &trans        &trans
            >;
        };

        LOWER_LAYER {
            bindings = <
&kp ESC  &kp EXCL   &kp AT     &kp HASH           &kp DOLLAR     &kp PERCENT         &kp PLUS        &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &trans
&trans   &kp TILDE  &kp CARET  &kp APOS           &kp LESS_THAN  &kp GREATER_THAN    &kp MINUS       &kp EQUAL      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE       &kp SINGLE_QUOTE
&trans   &none      &none      &kp DOUBLE_QUOTES  &none          &Captura            &kp UNDERSCORE  &kp ASTERISK   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH      &trans
                               &trans             &trans         &trans              &trans          &trans         &trans
            >;
        };

        LAYER_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp F10  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F12  &kp F1  &kp F2  &kp F3  &trans  &kp LEFT_ALT
                        &trans  &trans  &trans    &trans   &trans  &trans
            >;
        };

        LAYER_4 {
            bindings = <
&trans  &trans  &kp LC(UP)          &kp LC(PAGE_UP)    &kp LC(HOME)   &kp LC(LS(TAB))    &Clave  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &trans            &trans  &trans
&none   &none   &kp LC(DOWN_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(END)    &kp LC(TAB)        &trans  &kp C_VOL_DN     &kp C_VOLUME_UP    &kp C_PLAY_PAUSE  &trans  &trans
&trans  &none   &none               &kp LC(LEFT)       &kp LC(RIGHT)  &none              &trans  &kp DEL          &kp C_MUTE         &trans            &trans  &trans
                                    &trans             &trans         &trans             &trans  &trans           &trans
            >;
        };

        LAYER_5 {
            bindings = <
&trans  &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3      &kp NUMBER_4      &kp N5        &kp NUMBER_6      &kp N7      &kp N8      &kp NUMBER_9  &kp N0      &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)    &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)    &kp LS(N0)  &trans
&trans  &trans            &trans            &trans            &trans            &trans        &trans            &trans      &trans      &trans        &trans      &trans
                                            &trans            &trans            &trans        &trans            &trans      &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &kp F13  &kp F14  &kp F15  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &kp F16  &kp F17  &kp F18  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp A    &kp F19  &kp F20  &kp F21  &trans  &trans
                        &trans  &trans  &trans    &kp F22  &kp F23  &kp F24
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        capa4 {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        capa5 {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
